{"ast":null,"code":"/**\n * @remix-run/router v0.2.0-pre.3\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    process.env.NODE_ENV !== \"production\" ? warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to)) : void 0;\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    var _globalHistory$state, _globalHistory$state2;\n\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state = globalHistory.state) == null ? void 0 : _globalHistory$state.usr) || null, ((_globalHistory$state2 = globalHistory.state) == null ? void 0 : _globalHistory$state2.key) || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    var _globalHistory$state3, _globalHistory$state4;\n\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    ((_globalHistory$state3 = globalHistory.state) == null ? void 0 : _globalHistory$state3.usr) || null, ((_globalHistory$state4 = globalHistory.state) == null ? void 0 : _globalHistory$state4.key) || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    process.env.NODE_ENV !== \"production\" ? warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\") : void 0;\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst readOnly = process.env.NODE_ENV !== \"production\" ? obj => Object.freeze(obj) : obj => obj;\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  return readOnly(_extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to == null ? void 0 : to.key) || key || createKey()\n  }));\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation == null ? void 0 : validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], pathname);\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      !meta.relativePath.startsWith(parentPath) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\") : invariant(false) : void 0;\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      !(route.index !== true) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\")) : invariant(false) : void 0;\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    !(params[key] != null) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Missing \\\":\" + key + \"\\\" param\") : invariant(false) : void 0;\n    return params[key];\n  }).replace(/\\/*\\*$/, _ => params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\"));\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\")) : void 0;\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n    : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n    // parent routes to matching only their own words and nothing more, e.g. parent\n    // route \"/home\" should not match \"/home2\".\n    // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n    // but do not consume the character in the matched path so they can match against\n    // nested paths.\n    \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    process.env.NODE_ENV !== \"production\" ? warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\")) : void 0;\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname) {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : _extends({}, toArg);\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname; // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  let from;\n\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original to value had one.\n\n  if (toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\") && !path.pathname.endsWith(\"/\")) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n}; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  var _init$hydrationData, _init$hydrationData2, _init$hydrationData4, _init$hydrationData5, _init$hydrationData6;\n\n  !(init.routes.length > 0) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"You must provide a non-empty routes array to use Data Routers\") : invariant(false) : void 0;\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided function to call on all state changes\n\n  let subscriber = null; // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  } // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n\n\n  let foundMissingHydrationData = ((_init$hydrationData = init.hydrationData) == null ? void 0 : _init$hydrationData.errors) == null && ((_init$hydrationData2 = init.hydrationData) == null ? void 0 : _init$hydrationData2.loaderData) != null && initialMatches.filter(m => m.route.loader).some(m => {\n    var _init$hydrationData3, _init$hydrationData3$;\n\n    return ((_init$hydrationData3 = init.hydrationData) == null ? void 0 : (_init$hydrationData3$ = _init$hydrationData3.loaderData) == null ? void 0 : _init$hydrationData3$[m.route.id]) === undefined;\n  });\n\n  if (foundMissingHydrationData) {\n    console.warn(\"The provided hydration data did not find loaderData for all matched \" + \"routes with loaders.  Performing a full initial data load\");\n  }\n\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData ? {} : ((_init$hydrationData4 = init.hydrationData) == null ? void 0 : _init$hydrationData4.loaderData) || {},\n    actionData: ((_init$hydrationData5 = init.hydrationData) == null ? void 0 : _init$hydrationData5.actionData) || null,\n    errors: ((_init$hydrationData6 = init.hydrationData) == null ? void 0 : _init$hydrationData6.errors) || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = null; // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n\n  let pendingResetScroll = true; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    var _pendingNavigationCon;\n\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscriber = null;\n    (_pendingNavigationCon = pendingNavigationController) == null ? void 0 : _pendingNavigationCon.abort();\n\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscriber == null ? void 0 : subscriber(state);\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(historyAction, location, newState) {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\"; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll\n    }));\n    if (isUninterruptedRevalidation) ;else if (historyAction === Action.Pop) ;else if (historyAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(path, opts) {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error\n    } = normalizeNavigateOptions(typeof path === \"string\" ? parsePath(path) : path, opts);\n    let location = createLocation(state.location, normalizedPath, opts == null ? void 0 : opts.state);\n    let historyAction = (opts == null ? void 0 : opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let resetScroll = opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts == null ? void 0 : opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\" && state.navigation.formMethod !== \"get\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    var _pendingNavigationCon2; // Abort any in-progress navigations and start a new one\n\n\n    (_pendingNavigationCon2 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon2.abort();\n    pendingAction = historyAction; // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n\n    isUninterruptedRevalidation = (opts == null ? void 0 : opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation\n\n    saveScrollPosition(state.location, state.matches); // Track whether we should reset scroll on completion\n\n    pendingResetScroll = (opts == null ? void 0 : opts.resetScroll) !== false;\n    let loadingNavigation = opts == null ? void 0 : opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    }\n\n    if (opts != null && opts.pendingError) {\n      let boundaryMatch = findNearestBoundary(matches);\n      completeNavigation(historyAction, location, {\n        matches,\n        errors: {\n          [boundaryMatch.route.id]: opts == null ? void 0 : opts.pendingError\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches\n      });\n      return;\n    } // Call action if we received an action submission\n\n\n    let pendingActionData = null;\n    let pendingActionError = null;\n\n    if (opts != null && opts.submission) {\n      let actionOutput = await handleAction(historyAction, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(historyAction, location, opts == null ? void 0 : opts.submission, matches, loadingNavigation, pendingActionData, pendingActionError);\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(historyAction, location, submission, matches, opts) {\n    isRevalidationRequired = true;\n\n    if (matches[matches.length - 1].route.index && !hasNakedIndexQuery(location.search)) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    } // Put us in a submitting state\n\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = matches.slice(-1)[0];\n\n    if (!actionMatch.route.action) {\n      if (process.env.NODE_ENV !== \"production\") {\n        console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + createHref(location) + \"]\"));\n      }\n\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(405, \"Method Not Allowed\", \"No action found for [\" + createHref(location) + \"]\")\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n      result = await callLoaderOrAction(actionMatch, location, actionAbortController.signal, submission);\n\n      if (actionAbortController.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      } // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n\n\n      pendingNavigationController = null;\n    } // If the action threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission); // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n\n\n      let isPush = (opts == null ? void 0 : opts.replace) !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(historyAction, location, submission, matches, overrideNavigation, pendingActionData, pendingActionError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, pendingActionData, pendingActionError, fetchLoadMatches); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        var _state$fetchers$get;\n\n        let [key] = _ref2;\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: (_state$fetchers$get = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    } // Start the data load\n\n\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, abortController);\n    }); // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(m, location, abortController.signal)), ...revalidatingFetchers.map(_ref4 => {\n      let [, href, match] = _ref4;\n      return callLoaderOrAction(match, href, abortController.signal);\n    })]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach(key => fetchControllers.delete(key)); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, navigationResults, pendingActionError, revalidatingFetchers, fetcherResults);\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    var _state$fetchers$get2;\n\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    !matches ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"No matches found for fetch url: \" + href) : invariant(false) : void 0;\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let match = matches[matches.length - 1].route.index && !hasNakedIndexQuery(parsePath(href).search || \"\") ? matches.slice(-2)[0] : matches.slice(-1)[0];\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: ((_state$fetchers$get2 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get2.data) || undefined\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, href, match, submission) {\n    var _state$fetchers$get3;\n\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key); // Put this fetcher into it's submitting state\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: ((_state$fetchers$get3 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get3.data) || undefined\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(match, href, abortController.signal, submission);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error\n        }\n      });\n      return;\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location) : state.matches;\n    !matches ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Didn't find any matches after fetcher action\") : invariant(false) : void 0;\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, {\n      [match.route.id]: actionResult.data\n    }, null, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      var _state$fetchers$get4;\n\n      let [staleKey] = _ref6;\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: (_state$fetchers$get4 = state.fetchers.get(key)) == null ? void 0 : _state$fetchers$get4.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n\n    let results = await Promise.all([...matchesToLoad.map(m => callLoaderOrAction(m, nextLocation, abortController.signal)), ...revalidatingFetchers.map(_ref7 => {\n      let [, href, match] = _ref7;\n      return callLoaderOrAction(match, href, abortController.signal);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(staleKey => fetchControllers.delete(staleKey));\n    let loaderRedirect = findRedirect(loaderResults);\n\n    if (loaderRedirect) {\n      let redirectNavigation = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, null, revalidatingFetchers, fetcherResults);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      var _pendingNavigationCon3;\n\n      !pendingAction ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected pending action\") : invariant(false) : void 0;\n      (_pendingNavigationCon3 = pendingNavigationController) == null ? void 0 : _pendingNavigationCon3.abort();\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, href, match, loadingFetcher) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n    fetchLoadMatches.set(key, [href, match]); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(match, href, abortController.signal);\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key); // If the loader threw a redirect Response, start a new REPLACE navigation\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    } // Put the fetcher back into an idle state\n\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  } // Utility function to handle redirects returned from an action or loader\n\n\n  async function startRedirectNavigation(redirect, navigation, isPush) {\n    if (isPush === void 0) {\n      isPush = false;\n    }\n\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    !navigation.location ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected a location on the redirect navigation\") : invariant(false) : void 0;\n    await startNavigation(isPush ? Action.Push : Action.Replace, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    !controller ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected fetch controller: \" + key) : invariant(false) : void 0;\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      !fetcher ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected fetcher: \" + key) : invariant(false) : void 0;\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        !fetcher ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Expected fetcher: \" + key) : invariant(false) : void 0;\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    !!allIds.has(id) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\") : invariant(false) : void 0;\n    allIds.add(id);\n\n    let dataRoute = _extends({}, route, {\n      id,\n      children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n    });\n\n    return dataRoute;\n  });\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(path, opts) {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: (opts == null ? void 0 : opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let searchParams = new URLSearchParams(path.search);\n\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n      };\n    }\n  }\n\n  return {\n    path: _extends({}, path, {\n      search: \"?\" + searchParams\n    })\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, pendingActionData, pendingActionError, revalidatingFetcherMatches) {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError ? matches.findIndex(m => m.route.id === Object.keys(pendingActionError)[0]) : matches.length;\n  let actionResult = pendingActionError ? Object.values(pendingActionError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n\n    return isNewLoader(state.loaderData, state.matches[index], match) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult);\n  }); // If revalidation is required, pick fetchers that qualify\n\n  let revalidatingFetchers = [];\n\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  var _currentMatch$route$p;\n\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = // param change for this match, /users/123 -> /users/456\n  currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n  // e.g. /files/images/avatar.jpg -> files/finances.xls\n  ((_currentMatch$route$p = currentMatch.route.path) == null ? void 0 : _currentMatch$route$p.endsWith(\"*\")) && currentMatch.params[\"*\"] !== match.params[\"*\"] || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(match, location, signal, submission) {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    !handler ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\") : invariant(false) : void 0;\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    var _result$headers$get; // Process redirects\n\n\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    }\n\n    let data;\n\n    if ((_result$headers$get = result.headers.get(\"Content-Type\")) != null && _result$headers$get.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data)\n      };\n    }\n\n    return {\n      type: resultType,\n      data\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  return {\n    type: resultType,\n    data: result\n  };\n}\n\nfunction createRequest(location, submission) {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let {\n    formMethod,\n    formEncType,\n    formData\n  } = submission;\n  let body = formData; // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      !(typeof value === \"string\") ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.') : invariant(false) : void 0;\n      body.append(key, value);\n    }\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body\n  });\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingActionError, revalidatingFetchers, fetcherResults) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    !!isRedirectResult(result) ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"Cannot handle redirect results in processLoaderData\") : invariant(false) : void 0;\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingActionError) {\n    errors = pendingActionError;\n  } // Process results from our revalidating fetchers\n\n\n  revalidatingFetchers.forEach((_ref8, index) => {\n    let [key, href, match] = _ref8;\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      var _errors;\n\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!((_errors = errors) != null && _errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      process.env.NODE_ENV !== \"production\" ? invariant(false, \"Unhandled fetcher revalidation redirect\") : invariant(false);\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.errorElement) || matches[0];\n}\n\nfunction getNotFoundMatches(routes) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || r.path === \"\" || r.path === \"/\") || {\n    id: \"__shim-404-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null)\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result == null ? void 0 : result.type) === ResultType.redirect;\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nconst _excluded = [\"initialEntries\", \"initialIndex\"],\n      _excluded2 = [\"window\"],\n      _excluded3 = [\"window\"];\n\nfunction createMemoryRouter(_ref) {\n  let {\n    initialEntries,\n    initialIndex\n  } = _ref,\n      routerInit = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  let history = createMemoryHistory({\n    initialEntries,\n    initialIndex\n  });\n  return createRouter(_extends({\n    history\n  }, routerInit));\n}\n\nfunction createBrowserRouter(_ref2) {\n  let {\n    window\n  } = _ref2,\n      routerInit = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n\n  let history = createBrowserHistory({\n    window\n  });\n  return createRouter(_extends({\n    history\n  }, routerInit));\n}\n\nfunction createHashRouter(_ref3) {\n  let {\n    window\n  } = _ref3,\n      routerInit = _objectWithoutPropertiesLoose(_ref3, _excluded3);\n\n  let history = createHashHistory({\n    window\n  });\n  return createRouter(_extends({\n    history\n  }, routerInit));\n}\n\nexport { Action, IDLE_FETCHER, IDLE_NAVIGATION, createBrowserHistory, createBrowserRouter, createHashHistory, createHashRouter, createMemoryHistory, createMemoryRouter, createPath, createRouter, generatePath, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","state","key","location","createLocation","pathname","process","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","readOnly","obj","Object","freeze","warning","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","matchRoutes","routes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","parentsMeta","parentPath","forEach","route","meta","relativePath","caseSensitive","childrenIndex","startsWith","invariant","joinPaths","routesMeta","concat","children","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","params","pathnameBase","normalizePathname","generatePath","_","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","join","resolveTo","toArg","routePathnames","locationPathname","from","routePathnameIndex","toSegments","shift","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","has","set","Response","redirect","ErrorResponse","constructor","statusText","isRouteErrorResponse","ResultType","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","createRouter","dataRoutes","convertRoutesToDataRoutes","unlistenHistory","subscriber","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","id","foundMissingHydrationData","hydrationData","errors","loaderData","m","loader","router","historyAction","initialized","navigation","restoreScrollPosition","resetScrollPosition","revalidation","actionData","fetchers","Map","pendingAction","pendingResetScroll","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","Set","fetchLoadMatches","initialize","startNavigation","HistoryAction","dispose","abort","controller","subscribe","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","normalizedPath","submission","normalizeNavigateOptions","resetScroll","pendingError","revalidate","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","boundaryMatch","findNearestBoundary","isHashChangeOnly","pendingActionData","pendingActionError","actionOutput","handleAction","shortCircuited","handleLoaders","hasNakedIndexQuery","result","actionMatch","type","actionAbortController","AbortController","callLoaderOrAction","signal","aborted","isRedirectResult","redirectNavigation","isPush","startRedirectNavigation","isErrorResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","_ref2","revalidatingFetcher","get","_state$fetchers$get","abortController","_ref3","results","Promise","all","_ref4","navigationResults","fetcherResults","delete","findRedirect","getLoaderRedirect","processLoaderData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","routeId","abortFetcher","handleFetcherAction","loadingFetcher","handleFetcherLoader","fetcher","actionResult","add","loadId","loadFetcher","_ref5","staleKey","_ref6","_state$fetchers$get4","_ref7","loaderResults","loaderRedirect","doneFetcher","deleteFetcher","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","enableScrollRestoration","positions","getPosition","getKey","y","_internalFetchControllers","allIds","treePath","dataRoute","searchParams","URLSearchParams","name","append","revalidatingFetcherMatches","deepestRenderableMatchIndex","findIndex","values","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","resultType","handler","request","createRequest","_result$headers$get","text","Request","body","method","toUpperCase","_ref8","_errors","mergedLoaderData","eligibleMatches","reverse","find","errorElement","r","getAll","v","origin","URL","createMemoryRouter","routerInit","createMemoryHistory","createBrowserRouter","createBrowserHistory","createHashRouter","createHashHistory"],"sources":["C:\\xampp\\htdocs\\job_hooks\\node_modules\\@remix-run\\router\\history.ts","C:\\xampp\\htdocs\\job_hooks\\node_modules\\@remix-run\\router\\utils.ts","C:\\xampp\\htdocs\\job_hooks\\node_modules\\@remix-run\\router\\router.ts","C:\\xampp\\htdocs\\job_hooks\\node_modules\\@remix-run\\router\\index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(entry, null, index === 0 ? \"default\" : undefined)\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      globalHistory.state?.usr || null,\n      globalHistory.state?.key || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nconst readOnly: <T>(obj: T) => Readonly<T> = __DEV__\n  ? (obj) => Object.freeze(obj)\n  : (obj) => obj;\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Location {\n  return readOnly<Location>({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to as Location)?.key || key || createKey(),\n  });\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    validateLocation?.(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\nimport { DataResult, DataRouteMatch } from \"./router\";\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  signal: AbortSignal;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: DataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: DataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport interface RouteObject {\n  caseSensitive?: boolean;\n  children?: RouteObject[];\n  element?: React.ReactNode;\n  index?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  errorElement?: React.ReactNode;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n}\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport interface DataRouteObject extends RouteObject {\n  children?: DataRouteObject[];\n  id: string;\n}\n\ntype ParamParseFailed = { failed: true };\n\ntype ParamParseSegment<Segment extends string> =\n  // Check here if there exists a forward slash in the string.\n  Segment extends `${infer LeftSegment}/${infer RightSegment}`\n    ? // If there is a forward slash, then attempt to parse each side of the\n      // forward slash.\n      ParamParseSegment<LeftSegment> extends infer LeftResult\n      ? ParamParseSegment<RightSegment> extends infer RightResult\n        ? LeftResult extends string\n          ? // If the left side is successfully parsed as a param, then check if\n            // the right side can be successfully parsed as well. If both sides\n            // can be parsed, then the result is a union of the two sides\n            // (read: \"foo\" | \"bar\").\n            RightResult extends string\n            ? LeftResult | RightResult\n            : LeftResult\n          : // If the left side is not successfully parsed as a param, then check\n          // if only the right side can be successfully parse as a param. If it\n          // can, then the result is just right, else it's a failure.\n          RightResult extends string\n          ? RightResult\n          : ParamParseFailed\n        : ParamParseFailed\n      : // If the left side didn't parse into a param, then just check the right\n      // side.\n      ParamParseSegment<RightSegment> extends infer RightResult\n      ? RightResult extends string\n        ? RightResult\n        : ParamParseFailed\n      : ParamParseFailed\n    : // If there's no forward slash, then check if this segment starts with a\n    // colon. If it does, then this is a dynamic segment, so the result is\n    // just the remainder of the string, optionally prefixed with another string.\n    // Otherwise, it's a failure.\n    Segment extends `${string}:${infer Remaining}`\n    ? Remaining\n    : ParamParseFailed;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  ParamParseSegment<Segment> extends string\n    ? ParamParseSegment<Segment>\n    : string;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): RouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], pathname);\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<RouteObjectType extends RouteObject = RouteObject> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<RouteObjectType extends RouteObject = RouteObject> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<RouteObjectType extends RouteObject = RouteObject>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): RouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: RouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath(path: string, params: Params = {}): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/*\\*$/, (_) =>\n      params[\"*\"] == null ? \"\" : params[\"*\"].replace(/^\\/*/, \"/\")\n    );\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else {\n    regexpSource += end\n      ? \"\\\\/*$\" // When matching to the end, ignore trailing slashes\n      : // Otherwise, match a word boundary or a proceeding /. The word boundary restricts\n        // parent routes to matching only their own words and nothing more, e.g. parent\n        // route \"/home\" should not match \"/home2\".\n        // Additionally, allow paths starting with `.`, `-`, `~`, and url-encoded entities,\n        // but do not consume the character in the matched path so they can match against\n        // nested paths.\n        \"(?:(?=[@.~-]|%[0-9A-F]{2})|\\\\b|\\\\/|$)\";\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string\n): Path {\n  let to = typeof toArg === \"string\" ? parsePath(toArg) : { ...toArg };\n  let toPathname = toArg === \"\" || to.pathname === \"\" ? \"/\" : to.pathname;\n\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  let from: string;\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original to value had one.\n  if (\n    toPathname &&\n    toPathname !== \"/\" &&\n    toPathname.endsWith(\"/\") &&\n    !path.pathname.endsWith(\"/\")\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import { createPath, History, Location, Path, To } from \"./history\";\nimport { Action as HistoryAction, createLocation, parsePath } from \"./history\";\n\nimport {\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  invariant,\n  RouteMatch,\n  RouteObject,\n  Submission,\n} from \"./utils\";\nimport { ErrorResponse, matchRoutes } from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * Navigate forward/backward in the history stack\n   * @param path Delta to move in the history stack\n   */\n  navigate(path: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param path Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(path: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * Internal fetch AbortControllers accessed by unit tests\n   * @private\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: DataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should reset the scroll position if we\n   * are unable to restore the scroll position\n   */\n  resetScrollPosition: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: RouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: DataRouteMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  resetScroll?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\nenum ResultType {\n  data = \"data\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult = SuccessResult | RedirectResult | ErrorResult;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * errorElement to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to use Data Routers\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided function to call on all state changes\n  let subscriber: RouterSubscriber | null = null;\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  // If we received hydration data without errors - detect if any matched\n  // routes with loaders did not get provided loaderData, and if so launch an\n  // initial data re-load to fetch everything\n  let foundMissingHydrationData =\n    init.hydrationData?.errors == null &&\n    init.hydrationData?.loaderData != null &&\n    initialMatches\n      .filter((m) => m.route.loader)\n      .some((m) => init.hydrationData?.loaderData?.[m.route.id] === undefined);\n\n  if (foundMissingHydrationData) {\n    console.warn(\n      `The provided hydration data did not find loaderData for all matched ` +\n        `routes with loaders.  Performing a full initial data load`\n    );\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the errorElement to take over\n    matches: initialMatches,\n    initialized: init.hydrationData != null && !foundMissingHydrationData,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    resetScrollPosition: true,\n    revalidation: \"idle\",\n    loaderData: foundMissingHydrationData\n      ? {}\n      : init.hydrationData?.loaderData || {},\n    actionData: init.hydrationData?.actionData || null,\n    errors: init.hydrationData?.errors || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction | null = null;\n  // Should the current navigation reset the scroll position if scroll cannot\n  // be restored?\n  let pendingResetScroll = true;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, [string, DataRouteMatch]>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscriber = null;\n    pendingNavigationController?.abort();\n    for (let [, controller] of fetchControllers) {\n      controller.abort();\n    }\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    if (subscriber) {\n      throw new Error(\"A router only accepts one active subscriber\");\n    }\n    subscriber = fn;\n    return () => {\n      subscriber = null;\n    };\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscriber?.(state);\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - HistoryAction and Location are required params\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - This should not be susceptible to false positives for\n    //   loading/submissionRedirect since there would not be actionData in the\n    //   state since the prior action would have returned a redirect response\n    //   and short circuited\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\";\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      // Always reset scroll unless explicitly told not to\n      resetScrollPosition: pendingResetScroll,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (historyAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (historyAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (historyAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = null;\n    pendingResetScroll = true;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    path: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof path === \"number\") {\n      init.history.go(path);\n      return;\n    }\n\n    let {\n      path: normalizedPath,\n      submission,\n      error,\n    } = normalizeNavigateOptions(\n      typeof path === \"string\" ? parsePath(path) : path,\n      opts\n    );\n\n    let location = createLocation(state.location, normalizedPath, opts?.state);\n    let historyAction =\n      opts?.replace === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let resetScroll =\n      opts && \"resetScroll\" in opts ? opts.resetScroll : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right errorElement after we match routes\n      pendingError: error,\n      resetScroll,\n      replace: opts?.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    // Toggle isRevalidationRequired so the next data load will call all loaders,\n    // and mark us in a revalidating state\n    isRevalidationRequired = true;\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (\n      state.navigation.state === \"submitting\" &&\n      state.navigation.formMethod !== \"get\"\n    ) {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      resetScroll?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one\n    pendingNavigationController?.abort();\n    pendingAction = historyAction;\n\n    // Unset any ongoing uninterrupted revalidations (unless told otherwise),\n    // since we want this new navigation to update history normally\n    isUninterruptedRevalidation = opts?.startUninterruptedRevalidation === true;\n\n    // Save the current scroll position every time we start a new navigation\n    saveScrollPosition(state.location, state.matches);\n\n    // Track whether we should reset scroll on completion\n    pendingResetScroll = opts?.resetScroll !== false;\n\n    let loadingNavigation = opts?.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      completeNavigation(historyAction, location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    if (opts?.pendingError) {\n      let boundaryMatch = findNearestBoundary(matches);\n      completeNavigation(historyAction, location, {\n        matches,\n        errors: {\n          [boundaryMatch.route.id]: opts?.pendingError,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(historyAction, location, {\n        matches,\n      });\n      return;\n    }\n\n    // Call action if we received an action submission\n    let pendingActionData: RouteData | null = null;\n    let pendingActionError: RouteData | null = null;\n\n    if (opts?.submission) {\n      let actionOutput = await handleAction(\n        historyAction,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData || null;\n      pendingActionError = actionOutput.pendingActionError || null;\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      historyAction,\n      location,\n      opts?.submission,\n      matches,\n      loadingNavigation,\n      pendingActionData,\n      pendingActionError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    completeNavigation(historyAction, location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission,\n    matches: DataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    isRevalidationRequired = true;\n\n    if (\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(location.search)\n    ) {\n      // Note: OK to mutate this in-place since it's a scoped var inside\n      // handleAction and mutation will not impact the startNavigation matches\n      // variable that we use for revalidation\n      matches = matches.slice(0, -1);\n    }\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n\n    let actionMatch = matches.slice(-1)[0];\n    if (!actionMatch.route.action) {\n      if (__DEV__) {\n        console.warn(\n          \"You're trying to submit to a route that does not have an action.  To \" +\n            \"fix this, please add an `action` function to the route for \" +\n            `[${createHref(location)}]`\n        );\n      }\n      result = {\n        type: ResultType.error,\n        error: new ErrorResponse(\n          405,\n          \"Method Not Allowed\",\n          `No action found for [${createHref(location)}]`\n        ),\n      };\n    } else {\n      // Create a controller for this data load\n      let actionAbortController = new AbortController();\n      pendingNavigationController = actionAbortController;\n\n      result = await callLoaderOrAction(\n        actionMatch,\n        location,\n        actionAbortController.signal,\n        submission\n      );\n\n      if (actionAbortController.signal.aborted) {\n        return { shortCircuited: true };\n      }\n\n      // Clean up now that the loaders have completed.  We do do not clean up if\n      // we short circuited because pendingNavigationController will have already\n      // been assigned to a new controller for the next navigation\n      pendingNavigationController = null;\n    }\n\n    // If the action threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      // By default we use a push redirect here since the user redirecting from\n      // the action already handles avoiding us backing into the POST navigation\n      // However, if they specifically used <Form replace={true}> we should\n      // respect that\n      let isPush = opts?.replace !== true;\n      await startRedirectNavigation(result, redirectNavigation, isPush);\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    historyAction: HistoryAction,\n    location: Location,\n    submission: Submission | undefined,\n    matches: DataRouteMatch[],\n    overrideNavigation: Navigation | undefined,\n    pendingActionData: RouteData | null,\n    pendingActionError: RouteData | null\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      pendingActionData,\n      pendingActionError,\n      fetchLoadMatches\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(historyAction, location, {\n        matches,\n        // Commit pending action error if we're short circuiting\n        errors: pendingActionError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, remain in our current idle state.\n    // Otherwise, switch to our loading state and load data, preserving any\n    // new action data or existing action data (in the case of a revalidation\n    // interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    // Start the data load\n    let abortController = new AbortController();\n    pendingNavigationController = abortController;\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, abortController)\n    );\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, location, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let navigationResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up now that the loaders have completed.  We do do not clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n    revalidatingFetchers.forEach((key) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      navigationResults,\n      pendingActionError,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ) {\n    if (typeof AbortController === \"undefined\") {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    let matches = matchRoutes(dataRoutes, href);\n    invariant(matches, `No matches found for fetch url: ${href}`);\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let match =\n      matches[matches.length - 1].route.index &&\n      !hasNakedIndexQuery(parsePath(href).search || \"\")\n        ? matches.slice(-2)[0]\n        : matches.slice(-1)[0];\n\n    let { path, submission } = normalizeNavigateOptions(parsePath(href), opts);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, href, match, submission);\n      return;\n    }\n\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    handleFetcherLoader(key, routeId, createPath(path), match, loadingFetcher);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    submission: Submission\n  ) {\n    isRevalidationRequired = true;\n    fetchLoadMatches.delete(key);\n\n    // Put this fetcher into it's submitting state\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: state.fetchers.get(key)?.data || undefined,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal,\n      submission\n    );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: actionResult.error,\n        },\n      });\n      return;\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      { [match.route.id]: actionResult.data },\n      null, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: state.fetchers.get(key)?.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((m) =>\n        callLoaderOrAction(m, nextLocation, abortController.signal)\n      ),\n      ...revalidatingFetchers.map(([, href, match]) =>\n        callLoaderOrAction(match, href, abortController.signal)\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((staleKey) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let loaderRedirect = findRedirect(loaderResults);\n    if (loaderRedirect) {\n      let redirectNavigation = getLoaderRedirect(state, loaderRedirect);\n      await startRedirectNavigation(loaderRedirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      null,\n      revalidatingFetchers,\n      fetcherResults\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController?.abort();\n\n      completeNavigation(pendingAction, state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    href: string,\n    match: DataRouteMatch,\n    loadingFetcher: Fetcher\n  ) {\n    // Put this fetcher into it's loading state\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [href, match]);\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      match,\n      href,\n      abortController.signal\n    );\n\n    if (abortController.signal.aborted) return;\n    fetchControllers.delete(key);\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  // Utility function to handle redirects returned from an action or loader\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    isPush = false\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    await startNavigation(\n      isPush ? HistoryAction.Push : HistoryAction.Replace,\n      navigation.location,\n      { overrideNavigation: navigation }\n    );\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: DataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let key = getScrollRestorationKey(location, matches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get state() {\n      return state;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    createHref,\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with DataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(\n  routes: RouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): DataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n    let dataRoute: DataRouteObject = {\n      ...route,\n      id,\n      children: route.children\n        ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n        : undefined,\n    };\n    return dataRoute;\n  });\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  path: Partial<Path>,\n  opts?: RouterNavigateOptions\n): {\n  path: Partial<Path>;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createHref(path),\n        formEncType: opts?.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let searchParams = new URLSearchParams(path.search);\n  for (let [name, value] of opts.formData) {\n    if (typeof value === \"string\") {\n      searchParams.append(name, value);\n    } else {\n      return {\n        path,\n        error: new ErrorResponse(\n          400,\n          \"Bad Request\",\n          \"Cannot submit binary form data using GET\"\n        ),\n      };\n    }\n  }\n\n  return {\n    path: { ...path, search: `?${searchParams}` },\n  };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  pendingActionData: RouteData | null,\n  pendingActionError: RouteData | null,\n  revalidatingFetcherMatches: Map<string, [string, DataRouteMatch]>\n): [DataRouteMatch[], [string, string, DataRouteMatch][]] {\n  // Determine which routes to run loaders for, filter out all routes below\n  // any caught action error as they aren't going to render so we don't\n  // need to load them\n  let deepestRenderableMatchIndex = pendingActionError\n    ? matches.findIndex(\n        (m) => m.route.id === Object.keys(pendingActionError)[0]\n      )\n    : matches.length;\n\n  let actionResult = pendingActionError\n    ? Object.values(pendingActionError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let navigationMatches = matches.filter((match, index) => {\n    if (!match.route.loader || index >= deepestRenderableMatchIndex) {\n      return false;\n    }\n    return (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      shouldRevalidateLoader(\n        state.location,\n        state.matches[index],\n        submission,\n        location,\n        match,\n        isRevalidationRequired,\n        actionResult\n      )\n    );\n  });\n\n  // If revalidation is required, pick fetchers that qualify\n  let revalidatingFetchers: [string, string, DataRouteMatch][] = [];\n  if (isRevalidationRequired) {\n    for (let entry of revalidatingFetcherMatches.entries()) {\n      let [key, [href, match]] = entry;\n      let shouldRevalidate = shouldRevalidateLoader(\n        href,\n        match,\n        submission,\n        href,\n        match,\n        isRevalidationRequired,\n        actionResult\n      );\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match]);\n      }\n    }\n  }\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: DataRouteMatch,\n  match: DataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: DataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: DataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentMatch.route.path?.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"]) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    return match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  match: DataRouteMatch,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Promise<DataResult> {\n  let resultType = ResultType.data;\n  let result;\n\n  try {\n    let type: \"action\" | \"loader\" = submission ? \"action\" : \"loader\";\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await handler({\n      params: match.params,\n      request: createRequest(location, submission),\n      signal,\n    });\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  }\n\n  if (result instanceof Response) {\n    // Process redirects\n    let status = result.status;\n    let location = result.headers.get(\"Location\");\n    if (status >= 300 && status <= 399 && location != null) {\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    let data: any;\n    if (result.headers.get(\"Content-Type\")?.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n      };\n    }\n\n    return { type: resultType, data };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  return { type: resultType, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n\n  if (!submission) {\n    return new Request(url);\n  }\n\n  let { formMethod, formEncType, formData } = submission;\n  let body = formData;\n\n  // If we're submitting application/x-www-form-urlencoded, then body should\n  // be of type URLSearchParams\n  if (formEncType === \"application/x-www-form-urlencoded\") {\n    body = new URLSearchParams();\n\n    for (let [key, value] of formData.entries()) {\n      invariant(\n        typeof value === \"string\",\n        'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n          'please use \"multipart/form-data\" instead.'\n      );\n      body.append(key, value);\n    }\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, {\n    method: formMethod.toUpperCase(),\n    body,\n  });\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: DataRouteMatch[],\n  matchesToLoad: DataRouteMatch[],\n  results: DataResult[],\n  pendingActionError: RouteData | null,\n  revalidatingFetchers: [string, string, DataRouteMatch][],\n  fetcherResults: DataResult[]\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"];\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] = null;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // errorElement, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingActionError) {\n        error = Object.values(pendingActionError)[0];\n        pendingActionError = null;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n    } else {\n      loaderData[id] = result.data;\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingActionError) {\n    errors = pendingActionError;\n  }\n\n  // Process results from our revalidating fetchers\n  revalidatingFetchers.forEach(([key, href, match], index) => {\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!errors?.[boundaryMatch.route.id]) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  });\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: DataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor errorElement, defaulting\n// to the root match\nfunction findNearestBoundary(\n  matches: DataRouteMatch[],\n  routeId?: string\n): DataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.errorElement) || matches[0]\n  );\n}\n\nfunction getNotFoundMatches(routes: DataRouteObject[]): {\n  matches: DataRouteMatch[];\n  route: DataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(\n    (r) => r.index || r.path === \"\" || r.path === \"/\"\n  ) || {\n    id: \"__shim-404-route__\",\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(404, \"Not Found\", null),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return result?.type === ResultType.redirect;\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createHref(location);\n  return new URL(href, base);\n}\n//#endregion\n","import type {\n  BrowserHistoryOptions,\n  HashHistoryOptions,\n  MemoryHistoryOptions,\n} from \"./history\";\nimport {\n  createBrowserHistory,\n  createHashHistory,\n  createMemoryHistory,\n} from \"./history\";\nimport type { Router, RouterInit } from \"./router\";\nimport { createRouter } from \"./router\";\n\nfunction createMemoryRouter({\n  initialEntries,\n  initialIndex,\n  ...routerInit\n}: MemoryHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createMemoryHistory({ initialEntries, initialIndex });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createBrowserRouter({\n  window,\n  ...routerInit\n}: BrowserHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createBrowserHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nfunction createHashRouter({\n  window,\n  ...routerInit\n}: HashHistoryOptions & Omit<RouterInit, \"history\">): Router {\n  let history = createHashHistory({ window });\n  return createRouter({ history, ...routerInit });\n}\n\nexport * from \"./router\";\n\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  DataRouteObject,\n  FormEncType,\n  FormMethod,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  ParamParseKey,\n  Params,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  RouteMatch,\n  RouteObject,\n  ShouldRevalidateFunction,\n  Submission,\n} from \"./utils\";\n\nexport {\n  generatePath,\n  getToPathname,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  json,\n  matchPath,\n  matchRoutes,\n  normalizePathname,\n  redirect,\n  resolvePath,\n  resolveTo,\n  stripBasename,\n  warning,\n} from \"./utils\";\n\nexport type {\n  BrowserHistory,\n  HashHistory,\n  History,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Path,\n  To,\n} from \"./history\";\n\nexport {\n  Action,\n  createBrowserHistory,\n  createPath,\n  createHashHistory,\n  createMemoryHistory,\n  parsePath,\n} from \"./history\";\n\nexport { createBrowserRouter, createHashRouter, createMemoryRouter };\n"]},"metadata":{},"sourceType":"module"}